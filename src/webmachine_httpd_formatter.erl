%% @doc This lager formatter is a partial implementation of the custom
%% formatters available in the Apache mod_log_config
%% module_loaded. http://httpd.apache.org/docs/current/mod/mod_log_config.html

%% The initial version of mod_log_config support must handle the
%% access and perf formats from webmachine 1.x

%% access: "%h %l %u %t \"%r\" %>s %b %{Referer}i %{User-agent}i"
%% perf:   "%h %l %t \"%r\" %>s %b %R %{msec}T %wm-ppt"

%% %h - Remote hostname, but webmachine used remote IP
%% %l - Remote log name, (webmachine used `-`) because there's no mod_ident
%% %u - User (webmachine always used `-`)
%% %t - Datetime
%% %r - HTTP Request Method, Path, Protocol, and Protocol Version
%% %>s - Response Status Code (> means final status)
%% %b - Response Byte Size
%% %R - resource module that served the request
%% %{UNIT}T - time taken to serve the request, webmachine 1 used `ms` only.
%% %{VARNAME}i

%% The perf handler has an addtional feature specific to webmachine:
%% %wm-ppt - The time to handle any post-request processing including
%%   gathering any notes added during the request and th log data
%%   generated by the request.

-module(webmachine_httpd_formatter).

-export([
         format/2,
         format/3
        ]).

-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").
-endif.

-spec format(lager_msg:lager_msg(), list()) -> any().
format(Msg, Config) ->
    %% Transform Config string into something easily substitutable
    {ErlFmtStr, HttpdFmtStrs} =
        transform(Config),
    IOFmtArgs = [output(F, Msg) || F <- HttpdFmtStrs],
    lists:flatten(io_lib:format(ErlFmtStr, IOFmtArgs)).

%% @doc It looks like from the lager spec, that you need a format/3 if
%% you choose to use the lager console backend, but since we won't
%% need any console support for colors, we can route everything
%% through `format/2`
%% @see format/2
-spec format(lager_msg:lager_msg(), list(), list()) -> any().
format(Msg, Config, _) ->
    format(Msg, Config).

transform(Config) ->
    transform(Config, [], []).

%% [] means we're done, reverse the accumulators and let's get out of
%% here!
transform([], Erl, Httpd) ->
    {lists:reverse([$n,$~|Erl]),
     lists:reverse(Httpd)};
%% The trickiest case is for `%{SOMETHING}c`, e.g. `%{Referer}i`.
transform([$%,${|Rest], Erl, Httpd) ->
    Idx = string:str(Rest, "}") - 1,
    {Extra, [$},C|NewRest]} = lists:split(Idx, Rest),
    transform(NewRest, [$s,$~|Erl], [{[$%,C], Extra}|Httpd]);
%% %% just escapes %, drop one and move on.
transform([$%,$%|Rest], Erl, Httpd) ->
    transform(Rest, [$%|Erl], Httpd);
%% %>s
transform([$%,$>,$s|Rest], Erl, Httpd) ->
    transform(Rest, [$s,$~|Erl], [[$%,$>,$s]|Httpd]);
%% %wm-ppt
transform([$%,$w,$m,$-,$p,$p,$t|Rest], Erl, Httpd) ->
    transform(Rest, [$s,$~|Erl], [[$%,$w,$m,$-,$p,$p,$t]|Httpd]);
%% all one character codes caught by this clause
transform([$%,C|Rest], Erl, Httpd) ->
    transform(Rest, [$s,$~|Erl], [[$%,C]| Httpd]);
%% Default case for all basic characters
transform([H|Rest], Erl, Httpd) ->
    transform(Rest, [H|Erl], Httpd).

-spec output(string(), lager_msg:lager_msg()) -> string().
output("%wm-ppt", Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, EndTime} = lists:keyfind(wm_end_time, 1, Metadata),
    {_, FinishTime} = lists:keyfind(wm_finish_time, 1, Metadata),
    TTPD = webmachine_util:now_diff_milliseconds(FinishTime, EndTime),
    integer_to_list(TTPD);
output("%b", Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, ResponseLength} = lists:keyfind(wm_response_length, 1, Metadata),
    integer_to_list(ResponseLength);
output("%>s", Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, ResponseCode} = lists:keyfind(wm_response_code, 1, Metadata),
    Status =
        case ResponseCode of
            {Code, _ReasonPhrase} when is_integer(Code)  ->
                integer_to_list(Code);
            _ when is_integer(ResponseCode) ->
                integer_to_list(ResponseCode);
            _ ->
                ResponseCode
        end,
    Status;
output("%R", Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, Mod} = lists:keyfind(wm_resource_module, 1, Metadata),
    atom_to_list(Mod);
output({"%T", "usec"}, Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, StartTime} = lists:keyfind(wm_start_time, 1, Metadata),
    {_, EndTime} = lists:keyfind(wm_end_time, 1, Metadata),
    TTPD = timer:now_diff(EndTime, StartTime),
    integer_to_list(TTPD);
output({"%T", "msec"}, Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, StartTime} = lists:keyfind(wm_start_time, 1, Metadata),
    {_, EndTime} = lists:keyfind(wm_end_time, 1, Metadata),
    TTPD = webmachine_util:now_diff_milliseconds(EndTime, StartTime),
    integer_to_list(TTPD);
output({"%i", Header}, Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, Headers} = lists:keyfind(wm_headers, 1, Metadata),
    case mochiweb_headers:get_value(Header, Headers) of
        undefined -> "\"\"";
        R -> io_lib:format("\"~s\"", [R])
    end;
output("%r", Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, Meth} = lists:keyfind(wm_method, 1, Metadata),
    Method = case is_atom(Meth) of
                 true -> atom_to_list(Meth);
                 false -> Meth
             end,
    {_, Path} = lists:keyfind(wm_path, 1, Metadata),
    {_, {PMaj, PMin}} = lists:keyfind(wm_version, 1, Metadata),
    io_lib:format("~s ~s HTTP/~w.~w",
                  [
                   Method
                  ,Path
                  ,PMaj
                  ,PMin
                  ]);
output("%u", _Msg) ->
    "-";
output("%l", _Msg) ->
    "-";
output("%t", Msg) ->
    {ok, Zone} = application:get_env(webmachine, timezone),
    {[Year,45,Month,45,Date],
     [Hour,58,Min,58,Sec,46,_Milli|_]} = lager_msg:datetime(Msg),
    lists:flatten(
      io_lib:format("[~s/~s/~s:~s:~s:~s ~s]",
                    [Date, month(Month), Year, Hour, Min, Sec, Zone]
                   ));
output("%h", Msg) ->
    Metadata = lager_msg:metadata(Msg),
    {_, Peer} = lists:keyfind(wm_peer, 1, Metadata),
    fmt_ip(Peer).

%% @doc Format an IP address or host name
-spec fmt_ip(undefined | string() | inet:ip4_address() | inet:ip6_address()) -> string().
fmt_ip(IP) when is_tuple(IP) ->
    inet_parse:ntoa(IP);
fmt_ip(undefined) ->
    "0.0.0.0";
fmt_ip(HostName) ->
    HostName.

%% @doc Convert numeric month value to the abbreviation
-spec month(string()) -> string().
month("01") ->
    "Jan";
month("02") ->
    "Feb";
month("03") ->
    "Mar";
month("04") ->
    "Apr";
month("05") ->
    "May";
month("06") ->
    "Jun";
month("07") ->
    "Jul";
month("08") ->
    "Aug";
month("09") ->
    "Sep";
month("10") ->
    "Oct";
month("11") ->
    "Nov";
month("12") ->
    "Dec".

-ifdef(TEST).

access_test() ->
    application:set_env(webmachine, timezone, "-0700"),
    application:set_env(sasl, utc_log, true),
    Headers = mochiweb_headers:make(
                [{"Referer", "Place"}
                ,{"User-Agent", "User something..."}
                ]),
    Msg = lager_msg:new(
            "",
            {1476,809544,123363},
            info,
            [
             {wm_peer, {1,2,3,4}}
            ,{wm_version, {1,1}}
            ,{wm_path, "/thing"}
            ,{wm_method, "FOO"}
            ,{wm_response_code, {200, "cool!"}}
            ,{wm_response_length, 1024}
            ,{wm_headers, Headers}
            ],
            []),
    Str = format(Msg, "%h - %u %t \"%r\" %>s %b %{Referer}i %{User-Agent}i"),
    ?assertEqual(
       "1.2.3.4 - - [18/Oct/2016:16:52:24 -0700] \"FOO /thing HTTP/1.1\" 200 1024 \"Place\" \"User something...\"\n",
       Str
      ),
    ok.

perf_test() ->
    application:set_env(webmachine, timezone, "-0700"),
    application:set_env(sasl, utc_log, true),
    Headers = mochiweb_headers:make(
                [{"Referer", "Place"}
                ,{"User-Agent", "User something..."}
                ]),
    Msg = lager_msg:new(
            "",
            {1476,809544,123363},
            info,
            [
             {wm_peer, {1,2,3,4}}
            ,{wm_version, {1,1}}
            ,{wm_path, "/thing"}
            ,{wm_method, "FOO"}
            ,{wm_response_code, {200, "cool!"}}
            ,{wm_response_length, 1024}
            ,{wm_headers, Headers}
            ,{wm_start_time, {0,0, 1000}}
            ,{wm_end_time, {0,0,11000}}
            ,{wm_finish_time, {0,0,12001}}
            ,{wm_resource_module, my_mod}
            ],
            []),

    Str = format(Msg, "%h %l %t \"%r\" %>s %b %R %{msec}T %wm-ppt"),
    ?assertEqual(
       "1.2.3.4 - [18/Oct/2016:16:52:24 -0700] \"FOO /thing HTTP/1.1\" 200 1024 my_mod 10 1\n",
       Str
      ),
    ok.

-endif.
